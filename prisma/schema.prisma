generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  email     String?   @unique
  password  String
  role      Role      @default(VIEW)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  AuditLog  AuditLog[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  items     Item[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Item {
  id             Int       @id @default(autoincrement())
  partNo         String?
  itemName       String
  model          String?
  category       Category  @relation(fields: [categoryId], references: [id])
  categoryId     Int
  listPrice      Decimal   @db.Decimal(10, 2)
  sellingPrice   Decimal   @db.Decimal(10, 2)
  amcPrice       Decimal?  @db.Decimal(10, 2)
  nonAmcPrice    Decimal?  @db.Decimal(10, 2)
  priceValidTill DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  quotes         QuoteItem[]
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  action    String
  details   String   @db.Text
  createdAt DateTime @default(now())
}

model Client {
  id                Int      @id @default(autoincrement())
  companyName       String?
  resortName        String   @unique
  gstTinNo         String?  @unique
  itContact        String?
  designation      String?
  resortContact    String?
  mobileNo         String?
  email            String?
  atoll            String?
  maleOfficeAddress String?  @db.Text
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  quotes           Quote[]
}

model Quote {
  id            Int           @id @default(autoincrement())
  client        Client        @relation(fields: [resortName], references: [resortName])
  resortName    String
  quotedDate    DateTime      @default(now())
  quoteCategory QuoteCategory
  nextFollowUp  DateTime      @default(dbgenerated("DATE_ADD(NOW(), INTERVAL 5 DAY)"))
  status        QuoteStatus   @default(QUOTED)
  remarks       String?       @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  items         QuoteItem[]
  followUps     QuoteFollowUp[]
}

model QuoteItem {
  id       Int     @id @default(autoincrement())
  quote    Quote   @relation(fields: [quoteId], references: [id])
  quoteId  Int
  item     Item    @relation(fields: [itemId], references: [id])
  itemId   Int
  amount   Decimal @db.Decimal(10, 2)

  @@unique([quoteId, itemId])
}

model QuoteFollowUp {
  id           Int      @id @default(autoincrement())
  quote        Quote    @relation(fields: [quoteId], references: [id])
  quoteId      Int
  actionDate   DateTime @default(now())
  actionTaken  String
  notes        String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum Role {
  VIEW
  MANAGE
}

enum QuoteStatus {
  QUOTED
  FOLLOW_UP
  CONFIRMED
  CANCELLED
  BUDGETORY
  UNDECIDED
}

enum QuoteCategory {
  PMS
  POS
  BACK_OFFICE
  HARDWARE
  LICENSE
  OTHERS
}